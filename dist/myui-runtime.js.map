{"version":3,"sources":["webpack:///webpack/bootstrap 998291b6147e5b97cd95","webpack:///./src/myui-runtime.js","webpack:///./src/aaim-behavior.js","webpack:///./src/aaim-interpreter.js","webpack:///./src/aaim-service.js","webpack:///./src/situation-factory.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_3_situation_factory_js__","[object Object]","situationFactory","defaultService","this","_factory","_services","Map","set","_data","_currentConfig","undefined","config","situationParameters","Array","isArray","parameters","Promise","resolve","_resolveParameters","_callService","then","result","refresh","situation","create","service","length","Error","execute","has","varPattern","map","param","match","exec","steps","split","val","defaultParameters","provides","value","parameterMapping","all","index","values","resultMapping","behavior","_behavior","_running","_currentAAIM","_currentState","_loadedStates","running","run","initial","_performTransition","aaim","state","states","e","events","on","goto","do","target","executeTransition","executeState","bind","_functions","method","params","apply","reject","context"],"mappings":"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","file":"myui-runtime.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 998291b6147e5b97cd95","/*\r\n * Copyright (C) 2017 Fraunhofer IAO\r\n * All rights reserved.\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the Clear BSD license.  See the LICENSE file for details.\r\n */\r\n\r\nimport AAIMBehavior from 'aaim-behavior.js';\r\nimport AAIMInterpreter from 'aaim-interpreter.js';\r\nimport AAIMService from 'aaim-service.js';\r\nimport SituationFactory from 'situation-factory.js';\r\n\r\nexport {AAIMBehavior, AAIMInterpreter, AAIMService, SituationFactory};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/myui-runtime.js\n// module id = 0\n// module chunks = 0","/*\r\n * Copyright (C) 2017 Fraunhofer IAO\r\n * All rights reserved.\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the Clear BSD license.  See the LICENSE file for details.\r\n */\r\n\r\n/**\r\n * The AAIMBehavior serves as the central coordinator of the system's behavior \r\n * on state changes and transitions.\r\n * \r\n * @param {SituationFactory} situationFactory\r\n *    The SituationFactory instance to use for the creation of situations \r\n *    configured in state configurations.\r\n * @param {AAIMService} defaultService\r\n *    The AAIMService instance to use for method calls without a service name\r\n *    specified, may be undefined.\r\n */\r\nexport default class AAIMBehavior {\r\n  constructor(situationFactory, defaultService) {\r\n    /** \r\n     * The SituationFactory\r\n     * @private\r\n     */\r\n    this._factory = situationFactory;\r\n    \r\n    /** \r\n     * Registered services\r\n     * @private\r\n     */\r\n    this._services = new Map();\r\n    if (defaultService) {\r\n      this._services.set('', defaultService);\r\n    }\r\n    \r\n    /** \r\n     * The data context\r\n     * @private\r\n     */\r\n    this._data = new Map();\r\n    \r\n    /** \r\n     * The last executed state configuration\r\n     * @private\r\n     */\r\n    this._currentConfig = undefined;\r\n  }\r\n  \r\n  /**\r\n   * Executes a state configuration\r\n   *  \r\n   * @param {AAIM.StateBehavior} config\r\n   *    The state configuration object\r\n   * \r\n   * @throws {Error} If the given state configuration can not be executed due to an error.\r\n   */\r\n  executeState(config) {\r\n    let situationParameters;\r\n    \r\n    if (Array.isArray(config.parameters)) {\r\n      // List of parameter values\r\n      situationParameters = Promise.resolve(this._resolveParameters(config.parameters));\r\n\r\n    } else if (typeof config.parameters === \"object\") {\r\n      // Service call configuration\r\n      situationParameters = this._callService(config.parameters);\r\n\r\n    } else {\r\n      situationParameters = Promise.resolve([]);\r\n    }\r\n\r\n    situationParameters.then((result) => {\r\n      if (this._currentConfig === config) {\r\n        // Refresh current situation with identical configuration\r\n        this._factory.refresh(config.situation, result, this._data);\r\n\r\n      } else {\r\n        // Create new situation for new configuration\r\n        this._factory.create(config.situation, result, this._data);\r\n              \r\n        // Store config\r\n        this._currentConfig = config;\r\n      }\r\n    });\r\n    \r\n  }\r\n\r\n  /**\r\n   * Executes a transition configuration\r\n   * \r\n   * @param {AAIM.ServiceCall} config\r\n   *    The transition configuration object\r\n   * \r\n   * @returns {Promise} A Promise to the result of the executed transition.\r\n   */\r\n  executeTransition(config) {\r\n    if (typeof config === \"object\") {\r\n      // Service call configuration\r\n      return this._callService(config);\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\t\r\n  /**\r\n   * Registers a service with a given name.\r\n   * \r\n   * @param {String} name\r\n   *    The non-empty name under which the service should be registered.\r\n   * @param {AAIMService} service\r\n   *    The actual service implementation to register.\r\n   * \r\n   * @throws {Error} If name is empty or already taken or service seems not \r\n   *    to be a valid {@link AAIMService} implementation.\r\n   */\r\n  registerService(name, service) {\r\n    if(!name || name.length < 1) {\r\n      throw new Error(\"A service cannot be registered without a name.\");\r\n    } else if (!service || typeof service.execute !== \"function\") {\r\n      throw new Error(\"Services are required to provide an 'execute' function.\");\r\n    } else if (this._services.has(name)) {\r\n      throw new Error(`There is already a service named '${name}'.`);\r\n    }\r\n    \r\n    this._services.set(name, service);\r\n  }\r\n\t\r\n  /**\r\n   * Resolves the given array of parameter values and parameter references \r\n   * into an array of values.\r\n   * \r\n   * @protected\r\n   * \r\n   * @param {Array} parameters\r\n   *    The parameter array to resolve.\r\n   * \r\n   * @returns {Array} The array of resolved values.\r\n   */\r\n  _resolveParameters(parameters) {\r\n    let varPattern = /\\${(?:(\\w+)|([\\w\\.]+))}/;\r\n    let resolved = parameters.map(function(param) {\r\n      let match = varPattern.exec(param);\r\n      \r\n      if (match !== null && match[1] !== undefined) {\r\n        return this._data.get(match[1]);\r\n        \r\n      } else if (match !== null && match[2] !== undefined) {\r\n        let steps = match[2].split(\".\");\r\n        let val = this._data.get(steps[0]);\r\n        for (let i=1; typeof val == \"object\" && i<steps.length; i++) {\r\n          val = val[steps[i]];\r\n        }\r\n        return val;\r\n        \r\n      } else {\r\n        return param;\r\n      }\r\n    }, this);\r\n    return resolved;\r\n  }\r\n\r\n  /**\r\n   * Performs a service call according to a given configuration object including\r\n   * resolving or fetching parameters and mapping parameters and the result.\r\n   * \r\n   * @protected\r\n   * \r\n   * @param {AAIM.ServiceCall} config\r\n   *    The configuration object of the service call to be performed.\r\n   * @param {Array} defaultParameters\r\n   *    List of parameter values to use, if no parameters are configured.\r\n   * \r\n   * @returns {Promise} A Promise to the result of the service call.\r\n   * \r\n   * @throws {Error} If the given configuration is invalid.\r\n   */\r\n  _callService(config, defaultParameters) {\r\n    // Check configuration object\r\n    if (typeof config !== 'object' || config === null) {\r\n      throw new Error('No service configuration object provided!');\r\n    }\r\n    if (config.name === undefined || typeof config.name !== 'string' || config.name.length < 1) {\r\n      throw new Error('Invalid service configuration: \\'name\\' is required!');\r\n    }\r\n    if (config.service && (typeof config.service !== 'string' || config.service.length < 1)) {\r\n      throw new Error('Invalid service configuration: \\'service\\' has to be a non-empty string, if defined!');\r\n    }\r\n\r\n    // Determine service\r\n    let service = this._services.get(config.service ? config.service : '');\r\n    if (!service) {\r\n      throw new Error('Invalid service configuration: There is no ' +\r\n        (config.service && config.service.length > 0\r\n          ? `service named '${config.service}'!` \r\n          : 'default service!')\r\n      );\r\n    }\r\n    if (!service.provides(config.name)) {\r\n      throw new Error('Invalid service configuration: ' + \r\n        (config.service && config.service.length > 0\r\n          ? `Service '${config.service}'`\r\n          : 'Default service') +\r\n        ` does not provide a method '${config.name}'!`\r\n      );\r\n    }\r\n\r\n    // Prepare parameters\r\n    let parameters;\r\n    if (Array.isArray(config.parameters)) {\r\n      // List of parameter values or references to the data context\r\n      parameters = Promise.resolve(this._resolveParameters(config.parameters));\r\n\r\n    } else if (typeof config.parameters === 'object') {\r\n      // Data acquisition function service call configuration\r\n      parameters = this._callService(config.parameters).then(\r\n        (value) => { return Promise.resolve([ value ]); }\r\n      );\r\n\r\n    } else if (Array.isArray(defaultParameters)) {\r\n      // Default parameters provided\r\n      parameters = Promise.resolve(defaultParameters);\r\n\r\n    } else {\r\n      // Empty parameters\r\n      parameters = Promise.resolve([]);\r\n    }\r\n    \r\n    // Map parameters\r\n    if (Array.isArray(config.parameterMapping) && config.parameterMapping.length > 0) {\r\n      // One mapping call for each parameter\r\n      parameters = Promise.all(\r\n        config.parameters.map((value, index) => {\r\n          if (typeof config.parameterMapping[index] === 'object' && config.parameterMapping[index] !== null) {\r\n            return this._callService(config.parameterMapping[index], [ value ]);\r\n          } else {\r\n            return value;\r\n          }\r\n        })\r\n      );\r\n      \r\n    } else if (typeof config.parameters === 'object') {\r\n      // TODO: One call for all parameters\r\n\r\n    }\r\n\r\n    // Perform service call\r\n    let result = parameters.then((values) => {\r\n      return service.execute(config.name, ...values);\r\n    });\r\n\r\n    // Map result\r\n    if (typeof config.resultMapping === 'object' && config.resultMapping !== null) {\r\n      result = result.then((value) => { \r\n        return this._callService(config.resultMapping, [ value ]);\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n/**\r\n * A structured object configuring the behavior in a state.\r\n * @typedef {Object} AAIM.StateBehavior\r\n * @property {String} situation \r\n *    The name of the situation that will be handed over to the \r\n *    {@link SituationFactory}\r\n * @property {AAIM.Param[]|AAIM.ServiceCall} [parameters]\r\n *    The parameters to be handed over to the {@link SituationFactory} \r\n *    or a call to a service method to fetch those\r\n * @property {AAIM.ServiceCall[]} [parameterMapping]\r\n *    Service methods that are called to map the given parameters one \r\n *    by one mathed by index. That means, the first parameter handed to \r\n *    the first mapping method and so on.\r\n * \r\n * @example\r\n * {\r\n *  situation: <situation identifier>,\r\n *  parameters: [\r\n *    <parameter value> or <data context reference>, ...\r\n *  ] or <service call configuration>,\r\n *  parameterMapping: [\r\n *    <service call configuration>, ...\r\n *  ]\r\n * }\r\n */\r\n\r\n/**\r\n * A structured object defining a service call to be executed.\r\n * @typedef {Object} AAIM.ServiceCall\r\n * @property {String} [service]\r\n *    The name of the service to call or <code>undefined</code> to use \r\n *    the default service\r\n * @property {String} name\r\n *    The name of the service method to call\r\n * @property {AAIM.Param[]|AAIM.ServiceCall} [parameters]\r\n *    The parameters to be handed over to the specified service method \r\n *    or a call to another service method to fetch those\r\n * @property {AAIM.ServiceCall[]} [parameterMapping]\r\n *    Service methods that are called to map the given parameters one \r\n *    by one mathed by index. That means, the first parameter handed to \r\n *    the first mapping method and so on.\r\n * @property {AAIM.ServiceCall} [resultMapping]\r\n *    Service method that is called to map the result of this service call.\r\n * \r\n * @example\r\n * {\r\n *  service: <name of registered serivce>,\r\n *  name: <method name>,\r\n *  parameters: [\r\n *    <parameter value> or <data context reference>, ...\r\n *  ] or <service call configuration>,\r\n *  parameterMapping: [\r\n *    <service call configuration>, ...\r\n *  ],\r\n *  resultMapping: <service call configuration>\r\n * }\r\n */\r\n\r\n/**\r\n * A list of parameter values or data context references.\r\n * The notation of references to the data context uses the style of expressions in \r\n * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Template_literals#Expression_interpolation template literals}.\r\n * \r\n * @typedef {Any} AAIM.Param\r\n *  \r\n * @example '${foo.bar}' // will be resolved to the value of the \"bar\" property of the \"foo\" object in the data context.\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/aaim-behavior.js\n// module id = 1\n// module chunks = 0","/*\r\n * Copyright (C) 2017 Fraunhofer IAO\r\n * All rights reserved.\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the Clear BSD license.  See the LICENSE file for details.\r\n */\r\n\r\n/**\r\n * The AAIMInterpreter takes an AAIM object and interpretes the state machine it\r\n * represents. The execution of states and transitions triggered by events is \r\n * delegated to an {@link AAIMBehavior}.\r\n * \r\n * @param {AAIMBehavior} behavior\r\n *    The AAIMBehavior implementation the execution of the application states \r\n *    is delegated to.\r\n */\r\nexport default class AAIMInterpreter {\r\n  constructor(behavior) {\r\n    /** \r\n     * The behavior instance executing state configurations\r\n     * @private\r\n     */\r\n    this._behavior = behavior;\r\n    \r\n    /** \r\n     * The running state of the interpreter\r\n     * @private\r\n     */\r\n    this._running = false;\r\n    \r\n    /** \r\n     * The currently loaded AAIM\r\n     * @private\r\n     */\r\n    this._currentAAIM = undefined;\r\n    \r\n    /**\r\n     * The current state\r\n     * @private\r\n     */\r\n    this._currentState = undefined;\r\n    \r\n    /** \r\n     * The states of the current AAIM mapped by their names\r\n     * @private\r\n     */\r\n    this._loadedStates = undefined;\r\n\t}\r\n\r\n  /**\r\n   * Returns if the interpreter is currently running.\r\n   * \r\n   * @return {Boolean} true, if the interpreter is running, false otherwise\r\n   */\r\n  get running() {\r\n    return this._running;\r\n  }\r\n  \r\n  /**\r\n   * Sets the interpreter to run or to pause. The interpreter can only be set\r\n   * to running, if an AAIM is loaded. The interpreter upholds the current state \r\n   * when getting paused and restarted. To restart the AAIM in its initial state \r\n   * call {@link AAIMInterpreter#reset} after pausing the interpreter.\r\n   * \r\n   * @param {Boolean} run\r\n   *    true to run the interpreter, false to pause\r\n   */\r\n  set running(run) {\r\n    if (run && !this._running && this._currentAAIM !== undefined) {\r\n      this._running = true;\r\n      \r\n      // Initial startup?\r\n      if (this._currentState === undefined) { \r\n        if (typeof this._currentAAIM.initial === \"string\" \r\n              && this._loadedStates.has(this._currentAAIM.initial)) {\r\n          this._performTransition(this._loadedStates.get(this._currentAAIM.initial));\r\n        } else {\r\n          // Initial state is not defined or does not exist\r\n          this._running = false;\r\n        }\r\n      }\r\n    } else {\r\n      this._running = false;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Returns the currently loaded AAIM.\r\n   * \r\n   * @return {Object} the currently loaded AAIM or undefined\r\n   */\r\n  get aaim() {\r\n    return this._currentAAIM;\r\n  }\r\n  \r\n  /**\r\n   * Returns the current state of the AAIM.\r\n   * \r\n   * @return {Object} the current state or undefined\r\n   */\r\n  get state() {\r\n    return this._currentState;\r\n  }\r\n  \r\n  /**\r\n   * Loads an AAIM.\r\n   * \r\n   * @param {AAIM} aaim\r\n   *    The javascript object representing the AAIM.\r\n   */\r\n  load(aaim) {\r\n    if (!this._running) { // AAIMs can only be replaced while not running\r\n      if (typeof aaim === \"object\" && aaim !== null // AAIM objects but not null\r\n          && Array.isArray(aaim.states) && aaim.states.length > 0) { // with an non-empty states array\r\n        this._currentAAIM = aaim;\r\n        \r\n        // Create states map\r\n        this._loadedStates = new Map();\r\n        for (let s of this._currentAAIM.states) {\r\n          this._loadedStates.set(s.name, s);\r\n        }\r\n        \r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Resets a paused interpreter. After the reset the interpreter will be in the\r\n   * same state as directly after loading an AAIM (a.k.a. the initial state).\r\n   * Calls to this method will have no effect if the interpreter is currently\r\n   * running.\r\n   */\r\n  reset() {\r\n    if (!this._running) {\r\n      this._currentState = undefined;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Executes an event on the current state of the interpreter by its name. An\r\n   * event name not defined for the current state will have no effect.\r\n   * Calls to this method will have no effect if the interpreter is currently \r\n   * paused.\r\n   * \r\n   * @param {String} name\r\n   *    The name of the event so execute\r\n   */\r\n  executeEvent(name) {\r\n    if (this._running) {\r\n      for (let e of this._currentState.events) {\r\n        if (e.on == name && this._loadedStates.has(e.goto)) {\r\n          this._performTransition(this._loadedStates.get(e.goto), e.do);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Actually performs the transition to the given target state by executing the \r\n   * supplied behavior configuration.\r\n   * \r\n   * @private\r\n   * \r\n   * @param {Object} target\r\n   *    The target state to transition to\r\n   * @param {Object} config\r\n   *    The do-configuration of the transition if specified or undefined\r\n   */\r\n  _performTransition(target, config) {\r\n    this._currentState = target;\r\n    \r\n    if (config && this._behavior) {\r\n      this._behavior.executeTransition(config).then(function() {\r\n        this._behavior.executeState(target.do);\r\n      }.bind(this));\r\n    } else if (this._behavior) {\r\n      this._behavior.executeState(target.do);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A structured object representing an Abstract Application Interaction \r\n * Model (AAIM).\r\n * @typedef {Object} AAIM\r\n * @property {String} initial\r\n *    The name of the inital state\r\n * @property {AAIM.State[]} states\r\n *    A list of all the states in this AAIM\r\n * \r\n * @example\r\n * {\r\n *  initial: <name of initial state>,\r\n *  states: [\r\n *    {\r\n *      name: <name of the state>,\r\n *      do: <behavior configuration>\r\n *      events: [\r\n *        { \r\n *          on: <name of event>, \r\n *          goto: <name of target state>,\r\n *          do: <behavior configuration>\r\n *        }, ...\r\n *      ]\r\n *    }, ...\r\n *  ]\r\n * }\r\n */\r\n\r\n/**\r\n * A structured object representing a single state of an AAIM.\r\n * @typedef {Object} AAIM.State\r\n * @property {String} name \r\n *    The unique name of the state\r\n * @property {AAIM.StateBehavior} do\r\n *    An object containing the behavior configuration to be handed over to the \r\n *    {@link AAIMBehavior}\r\n * @property {AAIM.Event[]} events\r\n *    A list of events triggering transitions\r\n */\r\n\r\n/**\r\n * A structured object representing a transition triggered by an event.\r\n * @typedef {Object} AAIM.Event\r\n * @property {String} name \r\n *    The name of the event (unique in its containing state)\r\n * @property {String} goto\r\n *    The name of the target state\r\n * @property {AAIM.ServiceCall} do \r\n *    An object containing the behavior configuration to be handed over to the \r\n *    {@link AAIMBehavior}\r\n */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/aaim-interpreter.js\n// module id = 2\n// module chunks = 0","/*\r\n * Copyright (C) 2017 Fraunhofer IAO\r\n * All rights reserved.\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the Clear BSD license.  See the LICENSE file for details.\r\n */\r\n\r\n/**\r\n * AAIMService serves as a base class for the implementation of configurable \r\n * services that can be used in {@link AAIM} do-configurations.\r\n */\r\nexport default class AAIMService {\r\n  constructor() {\r\n    /** \r\n     * Provided methods by name\r\n     * @protected\r\n     */\r\n    this._functions = new Map();\r\n  }\r\n  \r\n  /**\r\n   * Calls a function by its name applying the provided parameters.\r\n   * \r\n   * @param {String} method\r\n   *    The name of the method to call.\r\n   * @param {Array} params\r\n   *    The parameters to call the function with.\r\n   * \r\n   * @returns {Promise} A promise to the result of the function call\r\n   * @throws {Error} If no function with the requested name is provided by this service.\r\n   */\r\n  execute(method, ...params) {\r\n    // Check if function exists\r\n    if (!this._functions.has(method)) {\r\n      throw new Error(`Function '${method}' is not provided by this service.`);\r\n    }\r\n    \r\n    // Execute function with given params\r\n    let val;\r\n    try {\r\n      // Actualy execute function\r\n      val = this._functions.get(method).apply(this, params);\r\n      \r\n      if (val instanceof Promise) {\r\n        // Forward returned promise\r\n        return val;\r\n      } else {\r\n        // Wrap non-promise return values into promise\r\n        return new Promise(function(resolve, reject) {\r\n          resolve(val);\r\n        });\r\n      }\r\n    } catch(e) {\r\n      // On error, return immediatly rejecting promise\r\n      return new Promise(function(resolve, reject) {\r\n        reject(e);\r\n      });\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Checks if a function is provided by this service.\r\n   * \r\n   * @param {String} method\r\n   *    The name of the method to check.\r\n   * \r\n   * @returns {Boolean} true if a method with the given name is provided by this service, false otherwise.\r\n   */\r\n  provides(method) {\r\n    return this._functions.has(method);\r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/aaim-service.js\n// module id = 3\n// module chunks = 0","/*\r\n * Copyright (C) 2017 Fraunhofer IAO\r\n * All rights reserved.\r\n *\r\n * This software may be modified and distributed under the terms\r\n * of the Clear BSD license.  See the LICENSE file for details.\r\n */\r\n\r\n/**\r\n * \r\n */\r\nexport default class SituationFactory {\r\n  \r\n  /**\r\n   * Creates a new SituationFactory\r\n   */\r\n  constructor() {\r\n    \r\n  }\r\n  \r\n  /**\r\n   * \r\n   * \r\n   * @abstract\r\n   * \r\n   * @param {String} situation\r\n   * @param {Any[]} parameters\r\n   * @param {Map} context\r\n   */\r\n  create(situation, parameters, context) {\r\n    \r\n  }\r\n  \r\n  /**\r\n   * \r\n   * \r\n   * @abstract\r\n   * \r\n   * @param {String} situation\r\n   * @param {Any[]} parameters\r\n   * @param {Map} context\r\n   */\r\n  refresh(situation, parameters, context) {\r\n    \r\n  }\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/situation-factory.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}